Goal: Add a tiny Supabase email/password login so scans can save under RLS. Create a simple Auth screen, a reusable useAuth hook, minimal navigator wiring, and light UI changes to Profile + New Project. Do not break existing flows.

Tasks

Deps (only if missing)

Ensure @react-native-async-storage/async-storage is installed:

npx expo install @react-native-async-storage/async-storage

Hook: src/hooks/useAuth.ts (new)

Create a hook that:

Tracks user state.

On mount: supabase.auth.getUser() to initialize.

Subscribes to supabase.auth.onAuthStateChange and updates user.

Exposes signIn(email, password), signUp(email, password), signOut().

Import supabase from our existing src/lib/supabase.

Screen: src/screens/AuthScreen.tsx (new)

Simple UI:

Email (text input), Password (secure text input).

Buttons: Sign In, Create Account (uses signIn / signUp from useAuth).

On success: toast “Signed in” and navigation.goBack().

On error: toast with error.message.

Keep styles consistent (brand purple CTA, rounded, adequate padding).

Accessibility: set accessibilityRole="button" and proper labels.

Navigator: Register the new route

In your main navigator (e.g., AppNavigator.tsx / navigation/index.tsx), add:

Auth → AuthScreen

options={{ title: 'Sign in' }} or headerShown: true

Do not rename existing routes.

Profile screen update (non-destructive)

Locate Profile screen file (e.g., app/screens/ProfileScreen.tsx or .js).

Use useAuth() at top.

If !user:

Show a card: title “Sign in to save scans”, body text (1 line), primary button Sign in → navigation.navigate('Auth').

If user:

Show their email, and a Sign out button that calls signOut() and toasts “Signed out”.

New Project guard (non-destructive)

Locate New Project screen (e.g., app/screens/NewProject.tsx).

Import and call useAuth().

Wherever you call saveRoomScan(...) or start the upload/save flow:

If !user → show toast “Please sign in to save scans”, then navigation.navigate('Auth'), and return early.

If user, proceed as-is.

Do not change any other behavior, layout, or navigation.

No secrets on client

Continue to use existing EXPO_PUBLIC_SUPABASE_URL and EXPO_PUBLIC_SUPABASE_ANON_KEY. Do not add service keys.

Acceptance Criteria

Auth screen appears and works: entering email+password creates account or signs in via Supabase.

Profile shows a “Sign in” card when logged out; shows email + “Sign out” when logged in.

New Project: tapping Scan room/Upload Photo when logged out routes to Auth with a toast, without crashing. When logged in, flow is unchanged.

useAuth updates UI reactively on sign-in/out without requiring app restart.