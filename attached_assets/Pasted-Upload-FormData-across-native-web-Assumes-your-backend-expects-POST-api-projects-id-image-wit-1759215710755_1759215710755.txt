Upload (FormData across native + web)

Assumes your backend expects POST /api/projects/:id/image with field file and returns { ok:true, url }.
If your server uploads during create, use the commented “create with image” call instead.

const BASE_URL = process.env.EXPO_PUBLIC_BASE_URL!; // https://api.diygenieapp.com

async function uploadRoomPhoto(projectId: string, asset: any) {
  // Build a Blob on web; RN can send the uri directly
  let filePart: any = {
    uri: asset.uri,
    name: asset.fileName || `room-${Date.now()}.jpg`,
    type: asset.mimeType || "image/jpeg",
  };

  if (Platform.OS === "web") {
    const resp = await fetch(asset.uri);
    const blob = await resp.blob();
    filePart = new File([blob], filePart.name, { type: filePart.type });
  }

  const fd = new FormData();
  fd.append("file", filePart); // <-- backend field name

  // ❗ DO NOT set 'Content-Type' yourself; let fetch add the boundary
  const r = await fetch(`${BASE_URL}/api/projects/${projectId}/image`, {
    method: "POST",
    body: fd,
  });

  if (!r.ok) {
    const text = await r.text().catch(() => "");
    throw new Error(`Upload failed (${r.status}): ${text || "unknown error"}`);
  }
  return r.json(); // { ok:true, url: "..." }
}

/* If your API creates + uploads in a single call, use this instead:

async function createProjectWithImage({ user_id, name, budget, skill }, asset) {
  // build filePart as above
  const fd = new FormData();
  fd.append("user_id", user_id);
  fd.append("name", name);
  fd.append("budget", budget);
  fd.append("skill", skill);
  fd.append("file", filePart);

  const r = await fetch(`${BASE_URL}/api/projects`, { method: "POST", body: fd });
  if (!r.ok) throw new Error(`Create failed (${r.status})`);
  return r.json();
}
*/

3) Wire it to your button
const onUploadPhoto = async () => {
  try {
    const asset = await pickRoomPhoto();
    if (!asset) return;

    // show the chosen image immediately in UI
    setLocalPreviewUri(asset.uri);

    // either:
    await uploadRoomPhoto(project.id, asset);
    // or:
    // await createProjectWithImage({ user_id, name, budget, skill }, asset);

    toast.success("Photo uploaded ✨");
  } catch (e:any) {
    console.error(e);
    toast.error(e.message || "Upload failed");
  }
};