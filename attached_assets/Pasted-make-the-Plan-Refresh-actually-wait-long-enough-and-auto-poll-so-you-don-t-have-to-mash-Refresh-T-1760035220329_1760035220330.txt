make the Plan → Refresh actually wait long enough and auto-poll so you don’t have to mash Refresh. This only touches the mobile app.

THEME
*** FILE: app/lib/api.ts
@@
 export async function fetchProjectPlanMarkdown(
   projectId: string,
   opts?: { signal?: AbortSignal; timeoutMs?: number }
 ): Promise<string | null> {
@@
   } finally {
     clearTimeout(timeout);
   }
 }
 
 // Kick off a build without preview (server marks ready when complete)
 export async function buildPlanWithoutPreview(projectId: string): Promise<boolean> {
@@
   return true;
 }
 
-// Poll plan endpoint until it is available (or time out)
+// Poll plan endpoint until it is available (or time out). Uses gentle backoff.
 export async function waitForPlanReady(
   projectId: string,
-  opts?: { totalMs?: number; stepMs?: number }
+  opts?: { totalMs?: number; stepMs?: number; maxStepMs?: number }
 ): Promise<string | null> {
-  const totalMs = opts?.totalMs ?? 12000;
-  const stepMs = opts?.stepMs ?? 800;
+  const totalMs = opts?.totalMs ?? 60000;       // wait up to 60s
+  let stepMs = opts?.stepMs ?? 1200;            // start at 1.2s
+  const maxStep = opts?.maxStepMs ?? 5000;      // cap at 5s
   const start = Date.now();
   while (Date.now() - start < totalMs) {
     const md = await fetchProjectPlanMarkdown(projectId).catch(() => null);
     if (md !== null) return md; // ready (even if empty string)
-    await new Promise((r) => setTimeout(r, stepMs));
+    await new Promise((r) => setTimeout(r, stepMs));
+    // backoff a bit each loop
+    stepMs = Math.min(Math.floor(stepMs * 1.35), maxStep);
   }
   return null; // timed out still not ready
 }

*** FILE: app/screens/ProjectDetails.tsx
@@
-import { View, Image, ActivityIndicator, Pressable, Text, ScrollView } from 'react-native';
+import { View, Image, ActivityIndicator, Pressable, Text, ScrollView } from 'react-native';
 import {
   fetchProjectById,
   fetchLatestScanForProject,
   fetchProjectPlanMarkdown,
   buildPlanWithoutPreview,
   waitForPlanReady,
 } from '../lib/api';
 import Markdown from '../components/Markdown';
@@
   const [scan, setScan] = useState<{ scanId: string; imageUrl: string } | null>(null);
   const [planMd, setPlanMd] = useState<string | null>(null);
   const [planLoading, setPlanLoading] = useState(false);
+  const [autoPolled, setAutoPolled] = useState(false);
@@
   const load = useCallback(async () => {
     if (!projectId) return;
@@
         } else {
           setPlanMd(null);
         }
       }
     } catch (e: any) {
@@
   }, [projectId]);
 
+  // Smart refresh: if project is not ready, start build; then poll for plan.
   const smartRefresh = useCallback(async () => {
     if (!projectId) return;
     setPlanLoading(true);
     try {
       const fresh = await fetchProjectById(projectId, { timeoutMs: 8000 }).catch(() => project);
       if (fresh) setProject(fresh);
       if (!fresh || fresh.status !== 'ready') {
         await buildPlanWithoutPreview(projectId);
       }
-      const md = await waitForPlanReady(projectId, { totalMs: 15000, stepMs: 900 });
+      const md = await waitForPlanReady(projectId, { totalMs: 60000, stepMs: 1200, maxStepMs: 5000 });
       if (md !== null) {
         setPlanMd(md);
       } else {
         // still not ready—leave "building" message
         setPlanMd(null);
       }
     } catch (e) {
       console.log('[plan smartRefresh error]', String((e as any)?.message || e));
     } finally {
       setPlanLoading(false);
     }
   }, [projectId, project]);
 
+  // Auto-poll once after first load if plan isn't ready yet.
+  useEffect(() => {
+    if (project && planMd === null && !planLoading && !autoPolled) {
+      setAutoPolled(true);
+      smartRefresh();
+    }
+  }, [project, planMd, planLoading, autoPolled, smartRefresh]);
@@
           <Pressable
             onPress={smartRefresh}
             style={{ paddingHorizontal: 10, paddingVertical: 6 }}
           >
             <Text style={{ color: '#7C3AED', fontWeight: '600' }}>Refresh</Text>
           </Pressable>
         </View>
         {planLoading ? (
           <View style={{ paddingVertical: 16 }}>
             <ActivityIndicator />
           </View>
         ) : planMd === null ? (
-          <Text style={{ color: '#6B7280', marginTop: 8 }}>
-            Your plan is building. Come back in a moment or tap Refresh.
-          </Text>
+          <Text style={{ color: '#6B7280', marginTop: 8 }}>
+            Your plan is building. This screen will update automatically; you can also tap Refresh.
+          </Text>
         ) : planMd.trim().length === 0 ? (
           <Text style={{ color: '#6B7280', marginTop: 8 }}>No plan content yet.</Text>
         ) : (
           <View style={{ marginTop: 10 }}>
             <Markdown content={planMd} />
           </View>
         )}
       </View>