Goal: Make the Back button on ProjectDetails always jump to the Projects tab (no matter how you arrived there). Use the official Tab action so it canâ€™t fall back to Home.

Constraints:

Do not change tab names or navigator structure.

Only touch the two files below.

THEME
// REPLACE FILE: app/lib/useSafeBack.ts
import { useCallback } from 'react';
import { useNavigation, TabActions } from '@react-navigation/native';

/**
 * Always jump to the Projects tab.
 * Uses TabActions.jumpTo to avoid goBack() edge cases.
 * Looks up the parent tab navigator (id="root-tabs" if present), else falls back.
 */
export function useSafeBack() {
  const navigation = useNavigation();

  return useCallback(() => {
    // Prefer the parent tabs (id="root-tabs" if set)
    // @ts-ignore
    const parent = navigation.getParent?.('root-tabs') || navigation.getParent?.();
    if (parent) {
      parent.dispatch(TabActions.jumpTo('Projects'));
      return;
    }
    // Fallback: try jumping directly (works if this screen itself is inside tabs)
    // @ts-ignore
    navigation.dispatch?.(TabActions.jumpTo('Projects'));
  }, [navigation]);
}

THEME
// EDIT FILE: app/screens/ProjectDetails.tsx
// Ensure header uses our safe back and hides the default back behavior.

import React, { useCallback, useEffect, useState } from 'react';
import { View, Image, ActivityIndicator, Pressable, Text } from 'react-native';
import { useRoute, useNavigation, RouteProp, useFocusEffect } from '@react-navigation/native';
import { useSafeBack } from '../lib/useSafeBack';
import T from '../components/T';
import { fetchProjectById, fetchLatestScanForProject } from '../lib/api';

type RouteParams = { id: string };
type R = RouteProp<Record<'ProjectDetails', RouteParams>, 'ProjectDetails'>;

export default function ProjectDetails() {
  const route = useRoute<R>();
  const navigation = useNavigation();
  const safeBack = useSafeBack();
  const projectId = route.params?.id;

  const [loading, setLoading] = useState(true);
  const [project, setProject] = useState<any>(null);
  const [scan, setScan] = useState<{ scanId: string; imageUrl: string } | null>(null);

  const load = useCallback(async () => {
    if (!projectId) return;
    setLoading(true);
    try {
      const [p, s] = await Promise.all([
        fetchProjectById(projectId),
        fetchLatestScanForProject(projectId),
      ]);
      setProject(p);
      setScan(s);
    } finally {
      setLoading(false);
    }
  }, [projectId]);

  useEffect(() => {
    navigation.setOptions({
      // Hide the default back behavior and render our own
      headerBackVisible: false,
      headerLeft: () => (
        <Pressable onPress={safeBack} style={{ paddingHorizontal: 12, paddingVertical: 6 }}>
          <Text style={{ fontWeight: '600' }}>Back</Text>
        </Pressable>
      ),
      title: 'Project',
    });
  }, [navigation, safeBack]);

  useEffect(() => { load(); }, [load]);
  useFocusEffect(useCallback(() => { load(); }, [load]));

  return (
    <View style={{ flex: 1, padding: 16 }}>
      <T.h2 style={{ marginBottom: 6 }}>
        {project?.name || project?.title || 'Project'}
      </T.h2>
      <T.muted style={{ marginBottom: 16 }}>
        Status: {project?.status || 'In progress'}
      </T.muted>

      {loading ? (
        <View style={{ paddingTop: 40 }}>
          <ActivityIndicator />
        </View>
      ) : scan?.imageUrl ? (
        <Image
          source={{ uri: scan.imageUrl }}
          style={{ width: '100%', height: 220, borderRadius: 16, backgroundColor: '#EEE' }}
          resizeMode="cover"
        />
      ) : (
        <View
          style={{
            width: '100%',
            height: 220,
            borderRadius: 16,
            backgroundColor: '#F2F2F2',
            alignItems: 'center',
            justifyContent: 'center',
          }}
        >
          <T.muted>No scan image yet</T.muted>
        </View>
      )}
    </View>
  );
}
