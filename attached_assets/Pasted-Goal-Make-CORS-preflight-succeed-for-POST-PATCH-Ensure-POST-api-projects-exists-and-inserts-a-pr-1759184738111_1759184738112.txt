Goal

Make CORS preflight succeed for POST/PATCH.

Ensure POST /api/projects exists and inserts a project row in Supabase, returning the new id.

Keep the GET /api/projects you already added.

Secrets required (already set): SUPABASE_URL, SUPABASE_SERVICE_KEY

Implementation (single file):

Add/confirm imports & middleware:

import cors from 'cors';
import express from 'express';
import { createClient } from '@supabase/supabase-js';

const app = express();
app.use(express.json());

app.use(cors({
  origin: true,
  credentials: false,
  methods: ['GET','POST','PATCH','OPTIONS'],
  allowedHeaders: ['Content-Type','Authorization']
}));
app.options('*', cors()); // preflight for all routes


Create Supabase server client (service role):

const sbUrl = process.env.SUPABASE_URL!;
const sbKey = process.env.SUPABASE_SERVICE_KEY!;
if (!sbUrl || !sbKey) throw new Error('Missing SUPABASE_URL or SUPABASE_SERVICE_KEY');
const supabase = createClient(sbUrl, sbKey, { auth: { persistSession: false } });


Ensure POST /api/projects (idempotent add if missing):

app.post('/api/projects', async (req, res) => {
  try {
    const { user_id, name, budget, skill, status } = req.body || {};
    if (!user_id || !name) {
      return res.status(400).json({ ok:false, error:'missing_fields' });
    }

    const insert = {
      user_id,
      name,
      budget: budget ?? null,
      skill:  skill ?? null,
      status: status ?? 'new',
      input_image_url: null,
      preview_url: null
    };

    const { data, error } = await supabase
      .from('projects')
      .insert(insert)
      .select('id')
      .single();

    if (error) return res.status(500).json({ ok:false, error: error.message });
    return res.status(201).json({ ok:true, id: data.id });
  } catch (e:any) {
    return res.status(500).json({ ok:false, error: e.message || 'server_error' });
  }
});


(Keep your existing GET /api/projects and the entitlements fallback as-is.)

Acceptance

From browser/devtools, OPTIONS /api/projects succeeds (handled by app.options('*', cors())).

POST /api/projects returns { ok:true, id: "<uuid>" }.

Upload flow in the app proceeds past “Upload Photo” without the network/CORS banner.