Persist the ROI rectangle to Supabase as a normalized region tied to the project’s latest scan.

We’ll pass the projectId into the Scan screen.

Create a tiny helper to save the region into room_scan_regions.

Keep camera blocked; just save the normalized {x,y,w,h}.

THEME
// ADD FILE: app/lib/regions.ts
import { supabase } from './supabase';

export type NormRect = { x: number; y: number; w: number; h: number };

export async function getLatestScanIdForProject(projectId: string): Promise<string | null> {
  const { data, error } = await supabase
    .from('room_scans')
    .select('id')
    .eq('project_id', projectId)
    .order('created_at', { ascending: false })
    .limit(1)
    .maybeSingle();
  if (error) throw error;
  return (data?.id as string) ?? null;
}

async function ensureScanForProject(projectId: string): Promise<string> {
  let scanId = await getLatestScanIdForProject(projectId);
  if (scanId) return scanId;

  const { data: sess } = await supabase.auth.getSession();
  const userId = sess?.session?.user?.id;
  if (!userId) throw new Error('AUTH_REQUIRED');

  const { data, error } = await supabase
    .from('room_scans')
    .insert({
      user_id: userId,
      project_id: projectId,
      meta: { source: 'ar' },
    })
    .select('id')
    .single();
  if (error) throw error;
  return data.id as string;
}

export async function saveFocusRegion(projectId: string, rect: NormRect) {
  const scanId = await ensureScanForProject(projectId);
  const { data, error } = await supabase
    .from('room_scan_regions')
    .insert({
      scan_id: scanId,
      kind: 'roi',
      label: 'Focus area',
      points: rect,          // normalized rect object {x,y,w,h}
      normalized: true,
      order_index: 0,
      meta: {},
    })
    .select('id')
    .single();
  if (error) throw error;
  return { regionId: data.id as string, scanId };
}

*** FILE: app/screens/ScanScreen.tsx
@@
-import React, { useState } from 'react';
-import { View, Text, Pressable } from 'react-native';
-import { useNavigation } from '@react-navigation/native';
+import React, { useState } from 'react';
+import { View, Text, Pressable, Alert } from 'react-native';
+import { useNavigation, useRoute, RouteProp } from '@react-navigation/native';
 import DraggableRect from '../components/DraggableRect';
+import { saveFocusRegion } from '../lib/regions';
 
 export default function ScanScreen() {
-  const navigation = useNavigation();
+  const navigation = useNavigation();
+  type Params = { projectId?: string };
+  const route = useRoute<RouteProp<Record<'Scan', Params>, 'Scan'>>();
+  const projectId = route.params?.projectId;
   const [norm, setNorm] = useState<{ x: number; y: number; w: number; h: number }>({ x: 0.2, y: 0.2, w: 0.5, h: 0.35 });
 
   return (
@@
-      <Pressable
-        onPress={() => {
-          console.log('[roi] normalized', norm);
-          navigation.goBack();
-        }}
+      <Pressable
+        onPress={async () => {
+          try {
+            if (!projectId) throw new Error('MISSING_PROJECT');
+            const res = await saveFocusRegion(projectId, norm);
+            console.log('[roi] saved', { projectId, ...res });
+            navigation.goBack();
+          } catch (e: any) {
+            console.log('[roi] save failed', String(e?.message || e));
+            Alert.alert('Could not save area', 'Please try again after creating a project.');
+          }
+        }}
         style={{ backgroundColor: '#7C3AED', paddingVertical: 12, borderRadius: 12, marginTop: 16, alignItems: 'center' }}
       >
         <Text style={{ color: 'white', fontWeight: '600' }}>Save area & Close</Text>
       </Pressable>
     </View>
   );
 }

*** FILE: app/screens/NewProject.tsx
@@
-import { View, Text, ScrollView, TextInput, Pressable, Image, ActivityIndicator, Keyboard } from 'react-native';
+import { View, Text, ScrollView, TextInput, Pressable, Image, ActivityIndicator, Keyboard } from 'react-native';
+import { ensureProjectForDraft } from '../lib/draft';
@@
-        <Pressable
-          onPress={() => { Keyboard.dismiss(); openCameraOrScan?.(); }}
+        {/* Scan room → ensure project exists, then navigate with projectId */}
+        <Pressable
+          onPress={async () => {
+            Keyboard.dismiss();
+            try {
+              const pid = draft.projectId ?? (await ensureProjectForDraft(draft));
+              if (!draft.projectId) setDraft({ ...draft, projectId: pid });
+              navigation.navigate('Scan' as never, { projectId: pid } as never);
+            } catch (e) {
+              console.log('[scan nav failed]', String((e as any)?.message || e));
+            }
+          }}
           style={{
             backgroundColor: isValid ? '#7C3AED' : '#C7C7C7',
             padding: 14, borderRadius: 14, alignItems: 'center',
             opacity: isValid ? 1 : 0.7,
           }}
         >
           <Text style={{ color: 'white', fontWeight: '600' }}>Scan room</Text>
         </Pressable>