Goal: Fix 422 invalid_name by guaranteeing a safe project name even if the user types emojis/empty text. If sanitizing yields nothing, fall back to a generated name like "DIY Project 2025-10-10 14:32" (or based on the description’s first words).

Files to touch

app/lib/draft.ts

Exact patch (paste verbatim)

*** Begin Patch
*** Update File: app/lib/draft.ts
@@
 import AsyncStorage from '@react-native-async-storage/async-storage';
 import { base } from './api'; // existing base URL helper
@@
 export async function clearNewProjectDraft(): Promise<void> {
   await AsyncStorage.removeItem(DRAFT_KEY);
 }
 
 // --- helpers for name cleanup ---
 function collapseSpaces(s: string) {
   return (s || '').replace(/\s+/g, ' ').trim();
 }
 export function sanitizeProjectName(raw: string) {
   // trim + collapse
   const trimmed = collapseSpaces(raw);
   // strip emojis / control chars
   const basic = trimmed.normalize('NFKD').replace(/[^\w\s\-.'"]/g, '');
   // whitelist: letters/numbers/space/._-'
   const whitelisted = basic.replace(/[^A-Za-z0-9 _.\-']/g, '');
   // collapse again and bound length
-  let safe = collapseSpaces(whitelisted).slice(0, 60);
+  let safe = collapseSpaces(whitelisted).slice(0, 60);
   // avoid leading/trailing punctuation
   safe = safe.replace(/^[\s._'\-]+/, '').replace(/[\s._'\-]+$/, '');
   return safe;
 }
 function nameLooksValid(name: string) {
   const s = (name || '').trim();
   return s.length >= 3 && s.length <= 60 && /[A-Za-z0-9]/.test(s);
 }
+
+function generateDefaultName(description?: string) {
+  const ts = new Date();
+  const pad = (n: number) => String(n).padStart(2, '0');
+  const stamp = `${ts.getFullYear()}-${pad(ts.getMonth()+1)}-${pad(ts.getDate())} ${pad(ts.getHours())}:${pad(ts.getMinutes())}`;
+  let base = 'DIY Project';
+  const desc = collapseSpaces(description || '');
+  if (desc.length >= 6) {
+    // Take first 3 words from description to make a human-ish default
+    const words = desc.split(' ').slice(0, 3).join(' ');
+    base = collapseSpaces(words).replace(/[^A-Za-z0-9 _.\-']/g, '');
+    // Ensure after cleanup we still have something usable
+    if (!nameLooksValid(base)) base = 'DIY Project';
+  }
+  return `${base} ${stamp}`.slice(0, 60);
+}
@@
 export async function ensureProjectForDraft(draft: NewProjectDraft): Promise<string> {
   if (draft?.projectId) return draft.projectId as string;
 
   const v = validateDraftForCreate(draft ?? {});
   if (!v.ok) {
     const message = v.errs.join('\n');
     const e: any = new Error('VALIDATION_FAILED');
     e.userMessage = message;
     throw e;
   }
 
-  // Build payload (with sanitized name)
-  let cleanName = sanitizeProjectName(v.name);
+  // Build payload (with sanitized name; fallback if empty/invalid)
+  let cleanName = sanitizeProjectName(v.name);
+  if (!nameLooksValid(cleanName)) {
+    const fallback = generateDefaultName(v.description);
+    console.log('[project create] name sanitized to empty/invalid; using fallback', { fallback });
+    cleanName = fallback;
+  }
   const payload = {
     name: cleanName,
     description: v.description.trim(),
     budget: v.budget,
     skill_level: v.skill,
   };
   console.log('[project create] payload', payload);
 
   async function postOnce(p: typeof payload) {
     const res = await fetch(`${base}/api/projects`, {
       method: 'POST',
       headers: { 'Content-Type': 'application/json' },
       body: JSON.stringify(p),
     });
     const text = await res.text().catch(() => '');
     let body: any = null;
     try { body = text ? JSON.parse(text) : null; } catch { body = text; }
     return { res, body, text };
   }
 
   // First attempt
   let { res, body } = await postOnce(payload);
 
   // If invalid_name, try one automatic repair and post again
   if (res.status === 422 && (body?.error === 'invalid_name' || /invalid[_\s-]?name/i.test(String(body)))) {
-    const repaired = sanitizeProjectName(cleanName);
-    if (repaired !== cleanName && nameLooksValid(repaired)) {
-      console.log('[project create] retry with sanitized name', { repaired });
-      ({ res, body } = await postOnce({ ...payload, name: repaired }));
-      cleanName = repaired;
-    }
+    // Try a stronger fallback if sanitize didn’t help
+    const repaired = nameLooksValid(cleanName) ? cleanName : generateDefaultName(v.description);
+    if (repaired !== cleanName && nameLooksValid(repaired)) {
+      console.log('[project create] retry with repaired name', { repaired });
+      ({ res, body } = await postOnce({ ...payload, name: repaired }));
+      cleanName = repaired;
+    }
   }
 
   if (!res.ok) {
     console.log('[project create] failed', { status: res.status, body });
     const detail =
       body?.userMessage ||
       body?.message ||
       body?.error ||
       body?.detail ||
       `HTTP ${res.status}`;
     const e: any = new Error(`PROJECT_CREATE_FAILED:${res.status}`);
     if (res.status === 422 && (body?.error === 'invalid_name')) {
       e.userMessage = 'Project title has characters the server does not accept. Use letters, numbers, spaces, and -_. (3–60 chars).';
     } else {
       e.userMessage = String(detail);
     }
     throw e;
   }
 
   const id = body?.id || body?.project?.id || body?.data?.id;
   if (!id) {
     const e: any = new Error('PROJECT_CREATE_FAILED:NO_ID');
     e.userMessage = 'Server did not return a project id.';
     throw e;
   }
 
   // Persist sanitized name + id back into draft
   const nextDraft: NewProjectDraft = { ...(draft ?? {}), projectId: id, name: cleanName };
   await saveNewProjectDraft(nextDraft);
   console.log('[project create] success', { id, name: cleanName });
   return id;
 }
*** End Patch