Goal:
After a successful upload, show a single “Saved Scan” card right under the upload buttons.
The card displays the thumbnail (imageUrl from uploadRoomScan.ts) and two buttons:
Mark Area → opens RoiModal
Measure → opens MeasureModal

Only one card is visible at a time; new uploads replace the previous scan.

THEME
// EDIT FILE: app/screens/NewProjectMedia.js
// Add local state for the saved scan + render SavedScanCard component.

import React, { useState } from 'react';
import { View, Pressable, Text, Image } from 'react-native';
import Toast from '../components/Toast';
import { supabase } from '../lib/supabase';
import RoiModal from '../components/RoiModal';
import MeasureModal from '../components/MeasureModal';

export default function NewProjectMedia(props) {
  const { isFormValid, onBlocked } = props;
  const [savedScan, setSavedScan] = useState(null);
  const [showRoi, setShowRoi] = useState(false);
  const [showMeasure, setShowMeasure] = useState(false);

  async function authPreflight() {
    const { data } = await supabase.auth.getSession();
    const user = data?.session?.user;
    if (!user) {
      Toast.show('Session expired. Please sign in again.');
      await supabase.auth.signOut();
      throw new Error('AUTH_REQUIRED');
    }
    return user;
  }

  const guard = (fn) => () => {
    if (!isFormValid) {
      onBlocked?.();
      return;
    }
    fn && fn();
  };

  const handleUpload = guard(async () => {
    try {
      await authPreflight();
      // Assume uploadRoomScan.ts exports a default uploadRoomScan(fileUri)
      const { uploadRoomScan } = await import('../lib/uploadRoomScan');
      const result = await uploadRoomScan();
      if (result?.imageUrl) {
        setSavedScan(result); // ✅ store latest scan
        Toast.show('Scan saved!');
      }
    } catch (e) {
      console.log('[upload failed]', e);
      Toast.show('Upload failed. Try again.');
    }
  });

  const handleScan = guard(async () => {
    // (optional) placeholder for future AR scanning
    Toast.show('AR scan coming soon!');
  });

  return (
    <View style={{ gap: 12, marginTop: 8 }}>
      {/* Upload / Scan Buttons */}
      <Pressable
        onPress={handleScan}
        style={{
          backgroundColor: isFormValid ? '#7C3AED' : '#C7C7C7',
          padding: 14,
          borderRadius: 14,
          alignItems: 'center',
          opacity: isFormValid ? 1 : 0.7,
        }}
      >
        <Text style={{ color: 'white', fontWeight: '600' }}>Scan Room</Text>
      </Pressable>

      <Pressable
        onPress={handleUpload}
        style={{
          backgroundColor: isFormValid ? '#7C3AED' : '#C7C7C7',
          padding: 14,
          borderRadius: 14,
          alignItems: 'center',
          opacity: isFormValid ? 1 : 0.7,
        }}
      >
        <Text style={{ color: 'white', fontWeight: '600' }}>Upload Photo</Text>
      </Pressable>

      {/* 🟣 Saved Scan Card */}
      {savedScan && (
        <View
          style={{
            marginTop: 16,
            backgroundColor: '#F3F0FF',
            borderRadius: 16,
            padding: 12,
            alignItems: 'center',
          }}
        >
          <Image
            source={{ uri: savedScan.imageUrl }}
            style={{ width: 220, height: 140, borderRadius: 12 }}
            resizeMode="cover"
          />
          <Text style={{ marginTop: 8, fontWeight: '600' }}>Saved Scan</Text>
          <View
            style={{
              flexDirection: 'row',
              gap: 12,
              marginTop: 10,
            }}
          >
            <Pressable
              onPress={() => setShowRoi(true)}
              style={{
                backgroundColor: '#7C3AED',
                paddingHorizontal: 16,
                paddingVertical: 10,
                borderRadius: 12,
              }}
            >
              <Text style={{ color: 'white', fontWeight: '600' }}>Mark Area</Text>
            </Pressable>

            <Pressable
              onPress={() => setShowMeasure(true)}
              style={{
                backgroundColor: '#7C3AED',
                paddingHorizontal: 16,
                paddingVertical: 10,
                borderRadius: 12,
              }}
            >
              <Text style={{ color: 'white', fontWeight: '600' }}>Measure</Text>
            </Pressable>
          </View>
        </View>
      )}

      {/* Modals */}
      <RoiModal visible={showRoi} onClose={() => setShowRoi(false)} scan={savedScan} />
      <MeasureModal visible={showMeasure} onClose={() => setShowMeasure(false)} scan={savedScan} />
    </View>
  );
}
