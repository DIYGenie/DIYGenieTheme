Keep all existing APIs. Touch only the plan fetch
// app/lib/api.ts
export async function fetchProjectPlanMarkdown(projectId: string, opts:{tolerate409?:boolean} = {}) {
  const url = `${base}/api/projects/${projectId}/plan`;
  const res = await fetch(url);
  if (res.ok) return await res.text();
  if (opts.tolerate409 && res.status === 409) return null; // just “not ready”
  throw new Error(`plan fetch failed: ${res.status}`);
}

2) Add a tiny local fallback only for the plan
// app/lib/localPlan.ts
import AsyncStorage from '@react-native-async-storage/async-storage';
const KEY = (id:string)=>`plan-md:${id}`;
export const saveLocalPlanMarkdown = (id:string, md:string)=>AsyncStorage.setItem(KEY(id), md);
export const getLocalPlanMarkdown = (id:string)=>AsyncStorage.getItem(KEY(id));

export function generateLocalPlanMarkdown({title, description, budget, skill_level}: any = {}) {
  return `# ${title ?? 'Project'}

**Overview**  
${description ?? 'A custom DIY project.'}

## Materials
- Plywood — 2 sheets
- 2x4 studs — 6
- Wood screws — 1 lb
- Wood glue — 1 bottle

## Tools
- Circular saw
- Drill/driver
- Tape measure
- Square
- Safety glasses

## Cut List
- Side panel: 24" × 18" ×2
- Shelf: 24" × 10" ×3
- Top/bottom: 24" × 12" ×2

## Steps
1. Measure and mark all cuts.
2. Rip panels.
3. Assemble carcass.
4. Add shelves.
5. Sand & finish.

## Time & Cost
- Time: 6–8 hours
- Cost: ~${budget ?? '$$'} (skill: ${skill_level ?? 'Intermediate'})
`;
}

3) PlanWaiting (or wherever you poll) — only affect the plan

Try server with tolerate409: true.

If it’s still null after N tries, generate and save a local plan.

Then navigate to ProjectDetails.

// after last poll attempt
import { saveLocalPlanMarkdown, generateLocalPlanMarkdown } from '../lib/localPlan';
import { fetchProjectById, fetchProjectPlanMarkdown } from '../lib/api';

let md = await fetchProjectPlanMarkdown(id, { tolerate409: true });
if (!md) {
  const p = await fetchProjectById(id).catch(()=>({}));
  md = generateLocalPlanMarkdown(p);
  await saveLocalPlanMarkdown(id, md);
}
// now go to details
parent?.navigate('Projects', { screen: 'ProjectsList' });
InteractionManager.runAfterInteractions(() => {
  parent?.navigate('Projects', { screen: 'ProjectDetails', params: { id } });
});

4) ProjectDetails prefers real plan, else local
// in load() inside ProjectDetails
const local = await getLocalPlanMarkdown(projectId);
let md = local;
if (!md) md = await fetchProjectPlanMarkdown(projectId, { tolerate409: true });
if (md) setPlanObj(parsePlanMarkdown(md));  // your existing parser