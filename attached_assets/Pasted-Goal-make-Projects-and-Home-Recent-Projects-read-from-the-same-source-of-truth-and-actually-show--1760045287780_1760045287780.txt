Goal: make Projects and Home → Recent Projects read from the same source of truth and actually show new items. We’ll add one API helper and switch both screens to it.

THEME
*** FILE: app/lib/api.ts
@@
+// Unified loader for the user's projects (Newest first)
+export async function fetchMyProjects(): Promise<any[]> {
+  // 1) Who is the user?
+  const { data: sess } = await supabase.auth.getSession();
+  const userId = sess?.session?.user?.id;
+  if (!userId) throw new Error('AUTH_REQUIRED');
+
+  // 2) Webhooks base (same as other calls here)
+  const base =
+    (global as any).__API_BASE_URL__ ??
+    process.env.EXPO_PUBLIC_API_BASE ??
+    process.env.API_BASE ??
+    'https://diy-genie-webhooks-tyekowalski.replit.app';
+
+  // 3) Fetch list
+  const url = `${base}/api/projects?user_id=${encodeURIComponent(userId)}`;
+  const res = await fetch(url, { method: 'GET' });
+  if (!res.ok) throw new Error(`projects fetch failed: ${res.status}`);
+  const body = await res.json().catch(() => null);
+  // Accept either {items:[...]} or bare array
+  const list: any[] = Array.isArray(body) ? body : body?.items ?? [];
+
+  // 4) Sort newest first (created_at or updated_at; fallback to id)
+  const toTime = (x: any): number => {
+    const c = x?.created_at || x?.updated_at || '';
+    const t = Date.parse(c);
+    if (!Number.isNaN(t)) return t;
+    // fallback: stringify id for stable-ish order
+    return Date.now() - Math.random() * 1000;
+  };
+  const sorted = [...list].sort((a, b) => toTime(b) - toTime(a));
+  console.log('[projects fetch unified] userId=%s → %d', userId, sorted.length);
+  return sorted;
+}

*** FILE: app/screens/ProjectsScreen.js
@@
-import React, { useEffect, useState, useCallback } from 'react';
+import React, { useEffect, useState, useCallback } from 'react';
 import { RefreshControl } from 'react-native';
 import { useFocusEffect } from '@react-navigation/native';
+import { fetchMyProjects } from '../lib/api';
 
 export default function ProjectsScreen(props) {
-  // ...existing state...
+  const [projects, setProjects] = useState([]);
+  const [loading, setLoading] = useState(false);
 
-  const load = useCallback(async () => {
-    // existing loader that fetches projects
-    // (left intact)
-  }, [/* existing deps */]);
+  // Unified loader
+  const load = useCallback(async () => {
+    setLoading(true);
+    try {
+      const items = await fetchMyProjects();
+      setProjects(items);
+    } catch (e) {
+      console.log('[projects load error]', String(e?.message || e));
+    } finally {
+      setLoading(false);
+    }
+  }, []);
 
   useEffect(() => { load(); }, [load]);
@@
-  // ...rest of file unchanged, but attach `refreshControl` to your root scroller:
-  // If your root is <ScrollView>:
-  //   <ScrollView refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />} ...>
-  // If your root is <FlatList data={projects} ...>:
-  //   <FlatList refreshing={refreshing} onRefresh={onRefresh} ... />
+  // If your root is <FlatList> ensure it uses our state + refresh hooks:
+  // <FlatList
+  //   data={projects}
+  //   refreshing={refreshing}
+  //   onRefresh={onRefresh}
+  //   // ...rest of your props...
+  // />
+  // If it's a <ScrollView>, attach:
+  // refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}
 }

*** FILE: app/screens/HomeScreen.js
@@
-import React, { useEffect, useState, useCallback } from 'react';
+import React, { useEffect, useState, useCallback } from 'react';
 import { RefreshControl } from 'react-native';
 import { useFocusEffect } from '@react-navigation/native';
+import { fetchMyProjects } from '../lib/api';
 
 export default function HomeScreen(props) {
-  // ...existing state...
+  const [recent, setRecent] = useState([]);
+  const [loading, setLoading] = useState(false);
 
-  const load = useCallback(async () => {
-    // existing loader that fetches recent projects (left intact)
-  }, [/* existing deps */]);
+  // Use the same unified loader and then slice to "recent"
+  const load = useCallback(async () => {
+    setLoading(true);
+    try {
+      const items = await fetchMyProjects();
+      setRecent(items.slice(0, 5)); // show top 5 newest
+    } catch (e) {
+      console.log('[home recent load error]', String(e?.message || e));
+    } finally {
+      setLoading(false);
+    }
+  }, []);
 
   useEffect(() => { load(); }, [load]);
@@
-  // ...rest of file unchanged, but attach `refreshControl` to your root scroller:
-  // If your root is <ScrollView>:
-  //   <ScrollView refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />} ...>
-  // If your root is <FlatList data={recent} ...>:
-  //   <FlatList refreshing={refreshing} onRefresh={onRefresh} ... />
+  // Make sure the component that renders "Recent Projects" uses `recent` from state:
+  // <FlatList data={recent} refreshing={refreshing} onRefresh={onRefresh} ... />
+  // or <ScrollView refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />} ...>
 }
