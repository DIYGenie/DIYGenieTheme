Goal (prod-clean, no hacks):
Always link each uploaded scan to the active project at the moment of upload. Then ProjectDetails loads the scan by project_id (no fallbacks). This avoids test-only logic and stops us from chasing ghosts later.

THEME
// EDIT FILE: app/lib/draft.ts
// Add a helper to guarantee there is a project on the server for the current draft.
// Returns the projectId (existing or newly created).

import { supabase } from './supabase';

const API_BASE =
  process.env.EXPO_PUBLIC_WEBHOOKS_BASE_URL ||
  'https://diy-genie-webhooks-tyekowalski.replit.app';

export type DraftLike = {
  projectId?: string;
  name?: string;
  budget?: string | number;
  skill_level?: string;
  title?: string;
};

export async function ensureProjectForDraft(draft: DraftLike): Promise<string> {
  if (draft.projectId) return draft.projectId;

  const { data, error } = await supabase.auth.getSession();
  if (error) throw error;
  const uid = data?.session?.user?.id;
  if (!uid) throw new Error('AUTH_REQUIRED');

  const body = {
    user_id: uid,
    name: draft?.name ?? draft?.title ?? 'Untitled project',
    budget: draft?.budget ?? '',
    skill_level: draft?.skill_level ?? '',
  };

  const res = await fetch(`${API_BASE}/api/projects`, {
    method: 'POST',
    headers: { 'content-type': 'application/json', accept: 'application/json' },
    body: JSON.stringify(body),
  });
  if (!res.ok) throw new Error(`PROJECT_CREATE_FAILED:${res.status}`);
  const json = await res.json();
  const id = json?.item?.id || json?.project?.id || json?.id;
  if (!id) throw new Error('PROJECT_ID_MISSING');
  return String(id);
}

THEME
// EDIT FILE: app/screens/NewProject.tsx
// Pass draft + onDraftChange into NewProjectMedia so it can ensure/link project on upload.

import React from 'react';
import { View, ScrollView, KeyboardAvoidingView, Platform } from 'react-native';
import T from '../components/T';
import Toast from '../components/Toast';
import NewProjectForm from './NewProjectForm';
import NewProjectMedia from './NewProjectMedia';
import { useNewProjectDraft } from '../lib/useNewProjectDraft';

export default function NewProject() {
  const { draft, setDraft, isValid } = useNewProjectDraft();

  return (
    <KeyboardAvoidingScreen>
      <ScrollView contentContainerStyle={{ padding: 16, gap: 16 }}>
        <T.h2>Create Your New Project</T.h2>
        <T.p>
          Tell us a little about your DIY project so Genie can guide you through
          scanning, planning, and building.
        </T.p>

        <NewProjectForm draft={draft} onDraftChange={setDraft} />

        <NewProjectMedia
          draft={draft}                // ⬅️ pass down
          onDraftChange={setDraft}     // ⬅️ pass down
          isFormValid={isValid}
          onBlocked={() =>
            Toast.show('Complete name, budget, and skill level to continue.')
          }
        />
      </ScrollView>
    </KeyboardAvoidingScreen>
  );
}

function KeyboardAvoidingScreen({ children }: { children: React.ReactNode }) {
  return (
    <KeyboardAvoidingView
      style={{ flex: 1 }}
      behavior={Platform.OS === 'ios' ? 'padding' : undefined}
      keyboardVerticalOffset={Platform.OS === 'ios' ? 64 : 0}
    >
      <View style={{ flex: 1 }}>{children}</View>
    </KeyboardAvoidingView>
  );
}

THEME
// EDIT FILE: app/screens/NewProjectMedia.js
// Ensure a project exists before upload, link the new scan to that project_id,
// and store projectId back into the draft (single-scan mode still applies).

import React, { useState } from 'react';
import { View, Pressable, Text, Image } from 'react-native';
import Toast from '../components/Toast';
import { supabase } from '../lib/supabase';
import { ensureProjectForDraft } from '../lib/draft';
import RoiModal from '../components/RoiModal';
import MeasureModal from '../components/MeasureModal';

export default function NewProjectMedia(props) {
  const { draft, onDraftChange, isFormValid, onBlocked } = props;
  const [savedScan, setSavedScan] = useState(null);
  const [showRoi, setShowRoi] = useState(false);
  const [showMeasure, setShowMeasure] = useState(false);

  async function authPreflight() {
    const { data } = await supabase.auth.getSession();
    const user = data?.session?.user;
    if (!user) {
      Toast.show('Session expired. Please sign in again.');
      await supabase.auth.signOut();
      throw new Error('AUTH_REQUIRED');
    }
    return user;
  }

  const guard = (fn) => () => {
    if (!isFormValid) {
      onBlocked?.();
      return;
    }
    fn && fn();
  };

  const handleUpload = guard(async () => {
    try {
      await authPreflight();

      // 1) Ensure there is a project for this draft
      const projectId = await ensureProjectForDraft(draft);
      if (!draft?.projectId) {
        onDraftChange?.({ ...draft, projectId });
      }

      // 2) Perform the upload
      const { uploadRoomScan } = await import('../lib/uploadRoomScan');
      const result = await uploadRoomScan(); // keep existing picker flow
      if (!result?.scanId) {
        Toast.show('Upload failed. Try again.');
        return;
      }

      // 3) Link the scan to the project (authoritative association)
      await supabase
        .from('room_scans')
        .update({ project_id: projectId })
        .eq('id', result.scanId);

      setSavedScan({ ...result, projectId }); // single-scan mode
      Toast.show('Scan saved to project!');
    } catch (e) {
      console.log('[upload/link failed]', e);
      // authPreflight already shows a toast for auth issues
      if (String(e?.message || e).includes('AUTH_REQUIRED')) return;
      Toast.show('Upload failed. Please try again.');
    }
  });

  const handleScan = guard(async () => {
    Toast.show('AR scan coming soon!');
  });

  return (
    <View style={{ gap: 12, marginTop: 8 }}>
      {/* Scan / Upload */}
      <Pressable
        onPress={handleScan}
        style={{
          backgroundColor: isFormValid ? '#7C3AED' : '#C7C7C7',
          padding: 14,
          borderRadius: 14,
          alignItems: 'center',
          opacity: isFormValid ? 1 : 0.7,
        }}
      >
        <Text style={{ color: 'white', fontWeight: '600' }}>Scan Room</Text>
      </Pressable>

      <Pressable
        onPress={handleUpload}
        style={{
          backgroundColor: isFormValid ? '#7C3AED' : '#C7C7C7',
          padding: 14,
          borderRadius: 14,
          alignItems: 'center',
          opacity: isFormValid ? 1 : 0.7,
        }}
      >
        <Text style={{ color: 'white', fontWeight: '600' }}>Upload Photo</Text>
      </Pressable>

      {/* Saved Scan Card (single-scan mode) */}
      {savedScan && (
        <View
          style={{
            marginTop: 16,
            backgroundColor: '#F3F0FF',
            borderRadius: 16,
            padding: 12,
            alignItems: 'center',
          }}
        >
          <Image
            source={{ uri: savedScan.imageUrl }}
            style={{ width: 220, height: 140, borderRadius: 12 }}
            resizeMode="cover"
          />
          <Text style={{ marginTop: 8, fontWeight: '600' }}>Saved Scan</Text>
          <View style={{ flexDirection: 'row', gap: 12, marginTop: 10 }}>
            <Pressable
              onPress={() => setShowRoi(true)}
              style={{ backgroundColor: '#7C3AED', paddingHorizontal: 16, paddingVertical: 10, borderRadius: 12 }}
            >
              <Text style={{ color: 'white', fontWeight: '600' }}>Mark Area</Text>
            </Pressable>
            <Pressable
              onPress={() => setShowMeasure(true)}
              style={{ backgroundColor: '#7C3AED', paddingHorizontal: 16, paddingVertical: 10, borderRadius: 12 }}
            >
              <Text style={{ color: 'white', fontWeight: '600' }}>Measure</Text>
            </Pressable>
          </View>
        </View>
      )}

      <RoiModal visible={showRoi} onClose={() => setShowRoi(false)} scan={savedScan} />
      <MeasureModal visible={showMeasure} onClose={() => setShowMeasure(false)} scan={savedScan} />
    </View>
  );
}

THEME
// EDIT FILE: app/lib/api.ts
// Make latest-scan lookup STRICT to project_id again (remove user fallback).
import { supabase } from './supabase';

export async function fetchLatestScanForProject(projectId: string) {
  const { data, error } = await supabase
    .from('room_scans')
    .select('id,image_url')
    .eq('project_id', projectId)
    .order('created_at', { ascending: false })
    .limit(1)
    .maybeSingle();

  if (error) throw error;
  if (!data) return null;
  return { scanId: data.id as string, imageUrl: data.image_url as string };
}