Goal: For uploaded photos, hide both tool buttons (Mark Area and Measure). Tools are AR-only. Keep the thumbnail card; show a small note explaining tools appear after an AR scan. Do not mount MeasureModal for uploads.

THEME
// REPLACE FILE: app/screens/NewProjectMedia.js
import React, { useState } from 'react';
import { View, Pressable, Text, Image } from 'react-native';
import Toast from '../components/Toast';
import { supabase } from '../lib/supabase';
import { ensureProjectForDraft } from '../lib/draft';
import RoiModal from '../components/RoiModal'; // AR-only tool; MeasureModal removed for uploads

export default function NewProjectMedia(props) {
  const { draft, onDraftChange, isFormValid, onBlocked } = props;
  const [savedScan, setSavedScan] = useState(null);
  const [showRoi, setShowRoi] = useState(false);

  async function authPreflight() {
    const { data } = await supabase.auth.getSession();
    const user = data?.session?.user;
    if (!user) {
      Toast.show('Session expired. Please sign in again.');
      await supabase.auth.signOut();
      throw new Error('AUTH_REQUIRED');
    }
    return user;
  }

  const guard = (fn) => () => {
    if (!isFormValid) {
      onBlocked?.();
      return;
    }
    fn && fn();
  };

  const handleScan = guard(async () => {
    // AR scan will be implemented; for now, just inform user
    Toast.show('AR scan coming soon!');
    // When AR is implemented, set source:'ar' and show ROI:
    // setSavedScan({ imageUrl: <frame>, scanId: <id>, projectId: draft.projectId, source: 'ar' });
  });

  const handleUpload = guard(async () => {
    try {
      await authPreflight();

      // 1) Ensure there is a project for this draft
      const projectId = await ensureProjectForDraft(draft);
      if (!draft?.projectId) onDraftChange?.({ ...draft, projectId });

      // 2) Perform the upload
      const { uploadRoomScan } = await import('../lib/uploadRoomScan');
      const result = await uploadRoomScan(); // { imageUrl, scanId }
      if (!result?.scanId) {
        Toast.show('Upload failed. Try again.');
        return;
      }

      // 3) Link the scan to the project (authoritative association)
      await supabase.from('room_scans').update({ project_id: projectId }).eq('id', result.scanId);

      // 4) Store with explicit source='upload' â†’ tools hidden
      setSavedScan({ ...result, projectId, source: 'upload' });
      Toast.show('Scan saved to project!');
    } catch (e) {
      if (String(e?.message || e).includes('AUTH_REQUIRED')) return;
      console.log('[upload/link failed]', e);
      Toast.show('Upload failed. Please try again.');
    }
  });

  // Tools are AR-only:
  const canAdjustArea = !!savedScan && savedScan.source === 'ar';

  return (
    <View style={{ gap: 12, marginTop: 8 }}>
      {/* Scan / Upload */}
      <Pressable
        onPress={handleScan}
        style={{
          backgroundColor: isFormValid ? '#7C3AED' : '#C7C7C7',
          padding: 14,
          borderRadius: 14,
          alignItems: 'center',
          opacity: isFormValid ? 1 : 0.7,
        }}
      >
        <Text style={{ color: 'white', fontWeight: '600' }}>Scan Room</Text>
      </Pressable>

      <Pressable
        onPress={handleUpload}
        style={{
          backgroundColor: isFormValid ? '#7C3AED' : '#C7C7C7',
          padding: 14,
          borderRadius: 14,
          alignItems: 'center',
          opacity: isFormValid ? 1 : 0.7,
        }}
      >
        <Text style={{ color: 'white', fontWeight: '600' }}>Upload Photo</Text>
      </Pressable>

      {/* Saved Scan Card (single-scan mode) */}
      {savedScan && (
        <View
          style={{
            marginTop: 16,
            backgroundColor: '#F3F0FF',
            borderRadius: 16,
            padding: 12,
            alignItems: 'center',
          }}
        >
          <Image
            source={{ uri: savedScan.imageUrl }}
            style={{ width: 220, height: 140, borderRadius: 12 }}
            resizeMode="cover"
          />
          <Text style={{ marginTop: 8, fontWeight: '600' }}>Saved Scan</Text>

          {/* AR-only tools (uploads hide both buttons) */}
          {canAdjustArea ? (
            <View style={{ flexDirection: 'row', gap: 12, marginTop: 10 }}>
              <Pressable
                onPress={() => setShowRoi(true)}
                style={{
                  backgroundColor: '#7C3AED',
                  paddingHorizontal: 16,
                  paddingVertical: 10,
                  borderRadius: 12,
                }}
              >
                <Text style={{ color: 'white', fontWeight: '600' }}>Adjust Area</Text>
              </Pressable>
            </View>
          ) : (
            <Text style={{ marginTop: 8, color: '#6B7280', textAlign: 'center' }}>
              Tools are available when you use <Text style={{ fontWeight: '700' }}>Scan Room</Text>.
            </Text>
          )}
        </View>
      )}

      {/* Mount ROI tool only when AR-enabled */}
      {canAdjustArea ? (
        <RoiModal visible={showRoi} onClose={() => setShowRoi(false)} scan={savedScan} />
      ) : null}
    </View>
  );
}
