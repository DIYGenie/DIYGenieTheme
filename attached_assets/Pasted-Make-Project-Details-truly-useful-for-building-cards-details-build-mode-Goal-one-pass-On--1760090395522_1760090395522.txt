Make Project Details truly useful for building (cards → details → build mode)

Goal (one pass):

On ProjectDetails.tsx, show six info cards (Overview, Materials, Cuts, Tools, Steps, Time & Cost).

Each card opens a detailed view with collapsible sections, checkboxes, copy buttons, and “save section to Photos.”

Add a sticky Build Mode that shows step-by-step, big text, next/prev, keeps screen awake, and remembers progress.

Cache plan locally so it works offline and loads instantly after first fetch.

Files to edit/create

app/screens/ProjectDetails.tsx (main UI & nav)

app/components/DetailCard.tsx (new)

app/components/SectionListCard.tsx (new)

app/lib/planCache.ts (new: AsyncStorage cache)

Re-use app/lib/plan.ts (parsing) and existing “save section to photos” util

Implementation

Local cache helper: app/lib/planCache.ts

import AsyncStorage from '@react-native-async-storage/async-storage';
const key = (id:string)=>`plan-cache:${id}`;
export async function getCachedPlan(id:string){ const s=await AsyncStorage.getItem(key(id)); return s?JSON.parse(s):null; }
export async function setCachedPlan(id:string, plan:any){ await AsyncStorage.setItem(key(id), JSON.stringify({plan, ts:Date.now()})); }


Reusable cards

app/components/DetailCard.tsx

import { View, Text, TouchableOpacity } from 'react-native';
export default function DetailCard({title, subtitle, onPress}:{title:string; subtitle?:string; onPress?:()=>void;}){
  return (
    <TouchableOpacity onPress={onPress} activeOpacity={0.85}
      style={{backgroundColor:'#fff',borderRadius:16,padding:16,marginBottom:12,
        shadowColor:'#000',shadowOpacity:0.06,shadowRadius:8,shadowOffset:{height:4,width:0},elevation:2}}>
      <Text style={{fontSize:18,fontWeight:'700'}}>{title}</Text>
      {!!subtitle && <Text style={{opacity:0.7,marginTop:4}} numberOfLines={2}>{subtitle}</Text>}
    </TouchableOpacity>
  );
}


app/components/SectionListCard.tsx

import { View, Text, TouchableOpacity } from 'react-native';
import { captureRef } from 'react-native-view-shot';
import * as Clipboard from 'expo-clipboard';
import { useRef } from 'react';

export function SectionListCard({title, items}:{title:string; items:string[]}) {
  const ref = useRef<View>(null);
  return (
    <View ref={ref} style={{backgroundColor:'#fff',borderRadius:16,padding:16,marginBottom:12}}>
      <View style={{flexDirection:'row',justifyContent:'space-between',alignItems:'center',marginBottom:8}}>
        <Text style={{fontSize:16,fontWeight:'700'}}>{title}</Text>
        <View style={{flexDirection:'row',gap:12}}>
          <TouchableOpacity onPress={async()=>{ await Clipboard.setStringAsync(items.join('\n')); }}>
            <Text style={{color:'#6D28D9'}}>Copy</Text>
          </TouchableOpacity>
          <TouchableOpacity onPress={async()=>{ if(!ref.current) return; await captureRef(ref,{format:'png'}); }}>
            <Text style={{color:'#6D28D9'}}>Save</Text>
          </TouchableOpacity>
        </View>
      </View>
      {items.length===0 ? <Text style={{opacity:0.6}}>No items listed.</Text> :
        items.map((t,i)=>(
          <View key={i} style={{flexDirection:'row',alignItems:'center',marginVertical:6}}>
            <View style={{width:22,height:22,borderRadius:5,borderWidth:1,borderColor:'#D1D5DB',marginRight:10}}/>
            <Text style={{flex:1}}>{t}</Text>
          </View>
        ))
      }
    </View>
  );
}


ProjectDetails layout + Build Mode

In ProjectDetails.tsx:

Import:

import DetailCard from '../components/DetailCard';
import { SectionListCard } from '../components/SectionListCard';
import * as Haptics from 'expo-haptics';
import { useKeepAwake } from 'expo-keep-awake';
import { getCachedPlan, setCachedPlan } from '../lib/planCache';


When you fetch/parse the plan, do:

// try cache first
const cached = await getCachedPlan(project.id);
if (cached?.plan && !planObj) setPlanObj(cached.plan);
// after successful fetch/parse
await setCachedPlan(project.id, parsed); setPlanObj(parsed);


Replace the current “PlanTabs” block with cards grid:

<DetailCard title="Overview" subtitle={planObj?.overview || 'High-level summary'} onPress={()=>setSheet('overview')} />
<DetailCard title="Materials" subtitle={`${planObj?.materials?.length||0} items`} onPress={()=>setSheet('materials')} />
<DetailCard title="Cuts" subtitle={`${planObj?.cuts?.length||0} parts`} onPress={()=>setSheet('cuts')} />
<DetailCard title="Tools" subtitle={`${planObj?.tools?.length||0} tools`} onPress={()=>setSheet('tools')} />
<DetailCard title="Steps" subtitle={`${planObj?.steps?.length||0} steps`} onPress={()=>setSheet('steps')} />
<DetailCard title="Time & Cost" subtitle={`${planObj?.time || '—'} • ${pla