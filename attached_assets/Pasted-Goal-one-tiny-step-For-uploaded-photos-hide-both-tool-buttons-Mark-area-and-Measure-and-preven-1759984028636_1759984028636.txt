Goal (one tiny step): For uploaded photos, hide both tool buttons (Mark area and Measure) and prevent Scan room from opening the camera. We’ll replace NewProjectMedia.js with a simple upload-only card. AR tools will be added later to the scan path only.

THEME
// REPLACE FILE: app/screens/NewProjectMedia.js
import React, { useState } from 'react';
import { View, Pressable, Text, Image } from 'react-native';
import Toast from '../components/Toast';
import { supabase } from '../lib/supabase';
import { ensureProjectForDraft } from '../lib/draft';

export default function NewProjectMedia(props) {
  const {
    draft = {},
    onDraftChange = () => {},
    isFormValid = false,
    onBlocked = () => {},
  } = props;

  const [savedScan, setSavedScan] = useState(null);

  async function authPreflight() {
    const { data } = await supabase.auth.getSession();
    const user = data?.session?.user;
    if (!user) {
      Toast.show('Session expired. Please sign in again.');
      await supabase.auth.signOut();
      throw new Error('AUTH_REQUIRED');
    }
    return user;
  }

  const guard = (fn) => () => {
    if (!isFormValid) {
      onBlocked?.();
      return;
    }
    fn && fn();
  };

  // ⛔️ Do NOT open camera yet (AR coming later)
  const handleScan = guard(async () => {
    Toast.show('AR Scan coming soon.');
  });

  const handleUpload = guard(async () => {
    try {
      await authPreflight();

      // 1) Ensure a project exists for this draft
      const projectId = await ensureProjectForDraft(draft);
      if (!draft?.projectId) onDraftChange({ ...draft, projectId });

      // 2) Pick + upload
      const { uploadRoomScan } = await import('../lib/uploadRoomScan');
      const result = await uploadRoomScan(); // -> { imageUrl, scanId }
      if (!result?.scanId) {
        Toast.show('Upload failed. Try again.');
        return;
      }

      // 3) Link to project
      await supabase.from('room_scans').update({ project_id: projectId }).eq('id', result.scanId);

      // 4) Save with explicit source='upload' (no tools for V1)
      setSavedScan({ ...result, projectId, source: 'upload' });
      Toast.show('Scan saved to project!');
    } catch (e) {
      if (String(e?.message || e).includes('AUTH_REQUIRED')) return;
      console.log('[upload/link failed]', e);
      Toast.show('Upload failed. Please try again.');
    }
  });

  return (
    <View style={{ gap: 12, marginTop: 8 }}>
      {/* Primary actions */}
      <Pressable
        onPress={handleScan}
        style={{
          backgroundColor: isFormValid ? '#7C3AED' : '#C7C7C7',
          padding: 14,
          borderRadius: 14,
          alignItems: 'center',
          opacity: isFormValid ? 1 : 0.7,
        }}
      >
        <Text style={{ color: 'white', fontWeight: '600' }}>Scan room</Text>
      </Pressable>

      <Pressable
        onPress={handleUpload}
        style={{
          backgroundColor: isFormValid ? '#7C3AED' : '#C7C7C7',
          padding: 14,
          borderRadius: 14,
          alignItems: 'center',
          opacity: isFormValid ? 1 : 0.7,
        }}
      >
        <Text style={{ color: 'white', fontWeight: '600' }}>Upload Photo</Text>
      </Pressable>

      {/* Saved Scan (upload path) — no tools shown in V1 */}
      {savedScan && (
        <View
          style={{
            marginTop: 16,
            backgroundColor: '#F3F0FF',
            borderRadius: 16,
            padding: 12,
            alignItems: 'center',
          }}
        >
          <Image
            source={{ uri: savedScan.imageUrl }}
            style={{ width: 220, height: 140, borderRadius: 12 }}
            resizeMode="cover"
          />
          <Text style={{ marginTop: 8, fontWeight: '600' }}>Saved scan</Text>
          <Text style={{ marginTop: 8, color: '#6B7280', textAlign: 'center' }}>
            Tools appear when you use <Text style={{ fontWeight: '700' }}>Scan room</Text>.
          </Text>
        </View>
      )}
    </View>
  );
}
