Awesome—let’s turn Project Details into a super useful “build hub.”
Here’s a **compact, ready-to-paste Replit Agent prompt** that adds real, actionable details without touching your API jobs.

---

**Make Project Details truly useful for building (cards → details → build mode)**

**Goal (one pass):**

* On `ProjectDetails.tsx`, show six info cards (Overview, Materials, Cuts, Tools, Steps, Time & Cost).
* Each card opens a detailed view with collapsible sections, checkboxes, copy buttons, and “save section to Photos.”
* Add a sticky **Build Mode** that shows step-by-step, big text, next/prev, keeps screen awake, and remembers progress.
* Cache plan locally so it works offline and loads instantly after first fetch.

**Files to edit/create**

* `app/screens/ProjectDetails.tsx` (main UI & nav)
* `app/components/DetailCard.tsx` (new)
* `app/components/SectionListCard.tsx` (new)
* `app/lib/planCache.ts` (new: AsyncStorage cache)
* Re-use `app/lib/plan.ts` (parsing) and existing “save section to photos” util

**Implementation**

1. **Local cache helper**: `app/lib/planCache.ts`

```ts
import AsyncStorage from '@react-native-async-storage/async-storage';
const key = (id:string)=>`plan-cache:${id}`;
export async function getCachedPlan(id:string){ const s=await AsyncStorage.getItem(key(id)); return s?JSON.parse(s):null; }
export async function setCachedPlan(id:string, plan:any){ await AsyncStorage.setItem(key(id), JSON.stringify({plan, ts:Date.now()})); }
```

2. **Reusable cards**

* `app/components/DetailCard.tsx`

```tsx
import { View, Text, TouchableOpacity } from 'react-native';
export default function DetailCard({title, subtitle, onPress}:{title:string; subtitle?:string; onPress?:()=>void;}){
  return (
    <TouchableOpacity onPress={onPress} activeOpacity={0.85}
      style={{backgroundColor:'#fff',borderRadius:16,padding:16,marginBottom:12,
        shadowColor:'#000',shadowOpacity:0.06,shadowRadius:8,shadowOffset:{height:4,width:0},elevation:2}}>
      <Text style={{fontSize:18,fontWeight:'700'}}>{title}</Text>
      {!!subtitle && <Text style={{opacity:0.7,marginTop:4}} numberOfLines={2}>{subtitle}</Text>}
    </TouchableOpacity>
  );
}
```

* `app/components/SectionListCard.tsx`

```tsx
import { View, Text, TouchableOpacity } from 'react-native';
import { captureRef } from 'react-native-view-shot';
import * as Clipboard from 'expo-clipboard';
import { useRef } from 'react';

export function SectionListCard({title, items}:{title:string; items:string[]}) {
  const ref = useRef<View>(null);
  return (
    <View ref={ref} style={{backgroundColor:'#fff',borderRadius:16,padding:16,marginBottom:12}}>
      <View style={{flexDirection:'row',justifyContent:'space-between',alignItems:'center',marginBottom:8}}>
        <Text style={{fontSize:16,fontWeight:'700'}}>{title}</Text>
        <View style={{flexDirection:'row',gap:12}}>
          <TouchableOpacity onPress={async()=>{ await Clipboard.setStringAsync(items.join('\n')); }}>
            <Text style={{color:'#6D28D9'}}>Copy</Text>
          </TouchableOpacity>
          <TouchableOpacity onPress={async()=>{ if(!ref.current) return; await captureRef(ref,{format:'png'}); }}>
            <Text style={{color:'#6D28D9'}}>Save</Text>
          </TouchableOpacity>
        </View>
      </View>
      {items.length===0 ? <Text style={{opacity:0.6}}>No items listed.</Text> :
        items.map((t,i)=>(
          <View key={i} style={{flexDirection:'row',alignItems:'center',marginVertical:6}}>
            <View style={{width:22,height:22,borderRadius:5,borderWidth:1,borderColor:'#D1D5DB',marginRight:10}}/>
            <Text style={{flex:1}}>{t}</Text>
          </View>
        ))
      }
    </View>
  );
}
```

3. **ProjectDetails layout + Build Mode**

* In `ProjectDetails.tsx`:

  * Import:

  ```ts
  import DetailCard from '../components/DetailCard';
  import { SectionListCard } from '../components/SectionListCard';
  import * as Haptics from 'expo-haptics';
  import { useKeepAwake } from 'expo-keep-awake';
  import { getCachedPlan, setCachedPlan } from '../lib/planCache';
  ```

  * When you fetch/parse the plan, do:

  ```ts
  // try cache first
  const cached = await getCachedPlan(project.id);
  if (cached?.plan && !planObj) setPlanObj(cached.plan);
  // after successful fetch/parse
  await setCachedPlan(project.id, parsed); setPlanObj(parsed);
  ```

  * Replace the current “PlanTabs” block with **cards grid**:

  ```tsx
  <DetailCard title="Overview" subtitle={planObj?.overview || 'High-level summary'} onPress={()=>setSheet('overview')} />
  <DetailCard title="Materials" subtitle={`${planObj?.materials?.length||0} items`} onPress={()=>setSheet('materials')} />
  <DetailCard title="Cuts" subtitle={`${planObj?.cuts?.length||0} parts`} onPress={()=>setSheet('cuts')} />
  <DetailCard title="Tools" subtitle={`${planObj?.tools?.length||0} tools`} onPress={()=>setSheet('tools')} />
  <DetailCard title="Steps" subtitle={`${planObj?.steps?.length||0} steps`} onPress={()=>setSheet('steps')} />
  <DetailCard title="Time & Cost" subtitle={`${planObj?.time || '—'} • ${planObj?.cost || '—'}`} onPress={()=>setSheet('time')} />
  ```

  * Add a simple bottom sticky Build Mode bar:

  ```tsx
  {planObj && (
    <View style={{position:'absolute',left:16,right:16,bottom:24}}>
      <TouchableOpacity
        onPress={() => { Haptics.selectionAsync(); setBuildMode(true); }}
        style={{backgroundColor:'#6D28D9',borderRadius:16,paddingVertical:16,alignItems:'center',
          shadowColor:'#6D28D9',shadowOpacity:0.25,shadowRadius:10,shadowOffset:{height:8,width:0}}}>
        <Text style={{color:'#fff',fontWeight:'800',fontSize:17}}>Start Build Mode</Text>
        <Text style={{color:'rgba(255,255,255,0.9)',marginTop:4}}>Step-by-step, large text, progress</Text>
      </TouchableOpacity>
    </View>
  )}
  ```

  * **Build Mode sheet/screen** (inline modal is fine):

  ```tsx
  {buildMode && (
    <View style={{position:'absolute',top:0,left:0,right:0,bottom:0,backgroundColor:'#fff',padding:20}}>
      {useKeepAwake()}
      <Text style={{fontSize:18,opacity:0.6,marginBottom:8}}>Step {idx+1} of {planObj?.steps?.length||0}</Text>
      <Text style={{fontSize:24,fontWeight:'800',marginBottom:8}}>{planObj?.steps[idx]?.title || 'Step'}</Text>
      <Text style={{fontSize:16,lineHeight:24}}>{planObj?.steps[idx]?.body || ''}</Text>
      <View style={{flexDirection:'row',justifyContent:'space-between',marginTop:24}}>
        <TouchableOpacity onPress={()=>setIdx(Math.max(0,idx-1))}><Text style={{color:'#6D28D9',fontSize:16}}>Back</Text></TouchableOpacity>
        <TouchableOpacity onPress={()=>setBuildMode(false)}><Text style={{color:'#111827',fontSize:16}}>Close</Text></TouchableOpacity>
        <TouchableOpacity onPress={()=>setIdx(Math.min((planObj?.steps?.length||1)-1,idx+1))}>
          <Text style={{color:'#6D28D9',fontSize:16}}>Next</Text>
        </TouchableOpacity>
      </View>
    </View>
  )}
  ```

  * For each sheet/modal opened by the cards, render `SectionListCard`:

  ```tsx
  // Example: materials detail
  {sheet==='materials' && (
    <SectionListCard title="Materials" items={(planObj?.materials||[]).map(m=>m.text ?? m)} />
  )}
  // Repeat for cuts/tools/steps (steps: use titles), overview = single card with copy/save, time & cost as two rows.
  ```

**UX extras**

* Checkboxes are visual (no RLS needed), but persist progress in state keyed by `project.id` using `AsyncStorage` if quick to add.
* “Copy” copies the list; “Save” exports the section as an image to Photos (re-uses your existing permission flow).
* Build Mode keeps the screen awake and uses larger typography—easy to follow while actually building.

**Acceptance**

* Opening a project shows the six cards immediately (from cache if available).
* Tapping a card opens a detailed view with list items, **Copy**, and **Save**.
* “Start Build Mode”
